let dceSignaturePads=[];function initializeSignaturePad(wrapper,$scope,$){const canvas=wrapper.querySelector("canvas");const hiddenInput=wrapper.querySelector("input");const clearButton=wrapper.querySelector("[data-action=clear]");const aspectRatio=parseFloat(canvas.getAttribute("data-aspect-ratio"))||2;const useJPEG=canvas.getAttribute("data-jpeg")==="yes";let rect=wrapper.getBoundingClientRect();let actualWidth=Math.round(rect.width);let actualHeight=Math.round(actualWidth/aspectRatio);canvas.width=actualWidth;canvas.height=actualHeight;let signaturePad=new SignaturePad(canvas,{penColor:canvas.getAttribute("data-pen-color"),backgroundColor:canvas.getAttribute("data-background-color"),});const updateValue=()=>{if(!signaturePad.isEmpty()){hiddenInput.value=signaturePad.toDataURL(`image/${useJPEG ? 'jpeg' : 'png'}`)}else{hiddenInput.value=""}};signaturePad.addEventListener("afterUpdateStroke",updateValue);clearButton.addEventListener("click",function(){const context=canvas.getContext("2d");context.fillStyle=canvas.getAttribute("data-background-color");context.fillRect(0,0,canvas.width,canvas.height);signaturePad.clear();hiddenInput.value=""});dceSignaturePads.push({wrapper,canvas,signaturePad,hiddenInput,aspectRatio,useJPEG})}
function onWindowResize(){dceSignaturePads=dceSignaturePads.filter(obj=>document.body.contains(obj.wrapper));dceSignaturePads.forEach((obj)=>{let{wrapper,canvas,signaturePad,hiddenInput,aspectRatio,useJPEG}=obj;let rect=wrapper.getBoundingClientRect();if(rect.width===0||rect.height===0){return}
const oldData=signaturePad.toData();const oldWidth=canvas.width;const oldHeight=canvas.height;let newWidth=Math.round(rect.width);let newHeight=Math.round(newWidth/aspectRatio);if(newWidth===oldWidth){return}
canvas.width=newWidth;canvas.height=newHeight;signaturePad.off();signaturePad=new SignaturePad(canvas,{penColor:canvas.getAttribute("data-pen-color"),backgroundColor:canvas.getAttribute("data-background-color"),});obj.signaturePad=signaturePad;const scaleX=newWidth/oldWidth;const scaleY=newHeight/oldHeight;oldData.forEach((stroke)=>{stroke.points.forEach((point)=>{point.x*=scaleX;point.y*=scaleY;point.pressure*=scaleX})});signaturePad.fromData(oldData);const updateValue=()=>{if(!signaturePad.isEmpty()){hiddenInput.value=signaturePad.toDataURL(`image/${useJPEG ? 'jpeg' : 'png'}`)}else{hiddenInput.value=""}};signaturePad.addEventListener("afterUpdateStroke",updateValue)})}
function WidgetElements_FormSignature($scope,$){dceSignaturePads=[];let wrappers=$scope.find(".dce-signature-wrapper");wrappers.each((_,wrapper)=>initializeSignaturePad(wrapper,$scope,$))}
jQuery(window).on("elementor/frontend/init",function(){elementorFrontend.hooks.addAction("frontend/element_ready/form.default",WidgetElements_FormSignature)});let resizeTimeout;window.addEventListener("resize",function(){clearTimeout(resizeTimeout);resizeTimeout=setTimeout(onWindowResize,250)})